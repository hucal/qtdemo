from string import Template

def add_missing_keys(d1, d2):
    for k, v in d2.items():
        if k not in d1:
            d1[k] = v
    return d1


# object_name = "Object Name"
def generate(object_name, props):
    generator = "generate_qobject.py (Hugo Rivera, 2016)"
    global_substitutions = {
            "generator": generator,
            "object_name": object_name.title().replace(" ", ""),
            "allcaps_object_name": object_name.upper().replace(" ", ""),
            "object_header_file": object_name.lower().replace(" ", "") + ".h"}
    make_prop_substitutions = lambda name, type_: {
            "type": type_, 
            "name": name,
            "member_name": "m_" + name,
            "capitalized_name": name.capitalize()}

    def apply_template(string, to_each=True, more_subs=None):
        substitutions = global_substitutions
        if not more_subs is None:
            add_missing_keys(substitutions, more_subs)

        if to_each:
            results = []
            for name, type_ in props:
                subs = dict()
                add_missing_keys(subs, substitutions)
                add_missing_keys(subs, make_prop_substitutions(name, type_))
                results.append(Template(string).substitute(subs))
            return results
        else:
            return Template(string).substitute(substitutions)

    properties = "\n".join(apply_template("   Q_PROPERTY(${type} ${name} READ ${name} WRITE set${capitalized_name} NOTIFY ${name}Changed)")) 
    ctor_arguments = ", ".join(apply_template("const ${type} &${name}")) 
    setters = "\n".join(       apply_template("    void set${capitalized_name}(${type} ${name});"))
    getters = "\n".join(       apply_template("    $type ${name}() const;"))
    signals = "\n".join(       apply_template("    void ${name}Changed(${type});"))
    member_variables = "\n".join(apply_template("    ${type} ${member_name};"))
    
    ctor_definitions = ", ".join(apply_template("${member_name}(${name})"))
    
    setters_source = "\n\n".join(apply_template("""void ${object_name}::set${capitalized_name}(${type} ${name})
{
    if (${name} != ${member_name}) {
        ${member_name} = ${name};
        emit ${name}Changed(${name});
    }
}"""))
    
    getters_source = "\n\n".join(apply_template("""${type} ${object_name}::${name}() const
{ 
    return ${member_name}; 
}"""))
    
    source = apply_template("""// generated by ${generator}
#include "${object_header_file}"

${object_name}::${object_name}(${ctor_arguments}, QObject *parent)
    : QObject(parent), ${ctor_definitions} 
{
}

${setters_source}

${getters_source}
""", 
    to_each=False,
    more_subs={"ctor_arguments": ctor_arguments, 
               "ctor_definitions": ctor_definitions, 
               "setters_source": setters_source, 
               "getters_source": getters_source})
    
    
    header = apply_template("""// generated by ${generator}
#ifndef ${allcaps_object_name}_H 
#define ${allcaps_object_name}_H

#include <QObject>

class ${object_name} : public QObject
{
    Q_OBJECT

${properties}

public:
    explicit ${object_name}(QObject *parent = 0);

    ${object_name}(${ctor_arguments}, QObject *parent=0);

${setters}

${getters}

signals:
${signals} 

private:
${member_variables}

};

#endif // ${allcaps_object_name}_H 
""", 
    to_each=False,
    more_subs={"properties": properties, 
               "ctor_arguments": ctor_arguments, 
               "setters": setters, 
               "getters": getters, 
               "signals": signals, 
               "member_variables": member_variables})

    return header, source
    
    
if __name__ == "__main__":
    h, s = generate("Data Object", [("name", "QString"), ("location", "QString")]) 
    print(h)
    print('-'*79, '\n')
    print(s)


