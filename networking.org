* Signals and Slots
** Concept
Many Qt signals are *emitted*, or activated, asynchronously.
They can carry data.
A signal can be connected to 0 or more Qt slots.
Slots are functions or methods that are called with their corresponding
slot's data as a parameter.
Qt signals can be emitted from any part of the application.

Qt signals are declared when defining a QObject class. 
They are emitted using the keyword *emit* and slots are connected
to signals using the *connect* function.
For example, a QObject used to store data, such as a list of classes,
is defined so that a signal called propChanged is emitted whenever
the property prop is modified.
When this happens, any slots connected to the propChanged signal are called
immediately.

* Networking
- Network operations emit signals on completion. When these signals
  are connected to appropriate slots, results can be handled
  asynchronously.
- The network operation can block the current thread after one of 
  the QIODevice::waitFor... methods is called.

* QSslSocket (TCP)
- Can operate in client and server mode.
- It's typical to connect using the QSslSocket::connectToHostEncrypted 
  method.
- Emits QAbstractSocket::ConnectedState when connected.
- Emits QSslSocket::encrypted when connection is encrypted.

** Server
- Server is based on the QTcpServer class. 
- Server emits signal QTcpServer::newConnection on new connections.
- The SslSocket::encryptedBytesWritten signal indicates a write has finished.
- Use QSslSocket::writeData to write a character array.

** Client
- Use QIODevice::readyRead signal and QIODevice::read method to read responses.
- Can call waitForCOnnected, waitForEncrypted, waitForReadyRead to
  make the socket synchronous.
* QNetworkRequest (HTTP)
To create:
- Pass a URL.
- Setup SSL using a QSslConfiguration

Purpose:
- Make GET, POST, PUT requests by passing it to QNetworkAccess.
- Authentication. Use cookies?
- Request list of classes.
- Request attendance statistics for a class.
- Request attendance statistics for all classes.
- Mark a student as present. 

* QNetworkReply (HTTP)
To create:
- QNetworkAccess GET, POST, or PUT methods return a QNetworkReply.

- The QNetworkAccessManager::finished signal emits this QNetworkReply
  when it has finished.
- QIODevice::readyRead emits when the connection was successful and there
  is data available.
- Can read data using QIODevice::read 
- Must delete after the request has finished.

* QNetworkAccess
This is used for both HTTP and low-level TCP connections.

On app startup:
- Create this object.
- For efficiency, can use the connectToHostEncrypted to 
  complete the SSL handshake and to check if the host is available.
- Connect a slot to the signal QNetworkAccessManager::encrypted,
  which is activated when the network has completed the SSL handshake.
- The signal QNetworkAccess::authenticationRequired is emitted when 
  the server requests authentication.

- The signal QNetworkAccessManager::sslErrors may be emitted in case of
  SSL errors.
- Similarly for the signal QNetworkReply::NetworkError.
- The signal QNetworkAccessManager::finished is emitted when a pending
  network reply is finished.

Bearer management provides roaming support and is enabled by default.
* QSslConfiguration
Stores a private key, local certificate, SSL protocol, CA certificates, and
allowed ciphers.

We won't reuse private keys. (Need to research).
